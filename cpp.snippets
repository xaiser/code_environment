# add doxygen
#extends c_style_doxygen

snippet cla "class" b
class $1
{
    public:
	    $1();
	    ~$1();
	private:
};
endsnippet

snippet inc "include" b
#include "$1"
endsnippet

snippet for "for loop" b
for ( int i = $1; i < $2; i++ )
{
    ${3://statement}
}
endsnippet

snippet if "if" b
if ( ${1:condition} )
{
    ${2://true-statement}
}
else
{
    ${3://false-statement}
}
endsnippet

snippet deH "define head file" b
#ifndef `!p snip.rv = snip.basename.upper()`_H_
#define `!p snip.rv = snip.basename.upper()`_H_

class ${1:`!p snip.rv = snip.basename`}
{
    public:
	    $1();
	    ~$1();

        $1(const $1 & _$1);
        const $1 & operator=(const $1 & rhs);
	private:
};

#endif
endsnippet

snippet cdr "construction" b
`!p snip.rv = snip.basename`::`!p snip.rv = snip.basename`()
{}

`!p snip.rv = snip.basename`::~`!p snip.rv = snip.basename`()
{}

`!p snip.rv = snip.basename`::`!p snip.rv = snip.basename`(const `!p snip.rv = snip.basename` & _`!p snip.rv = snip.basename`)
{}

const `!p snip.rv = snip.basename` & `!p snip.rv = snip.basename`::operator=(const `!p snip.rv = snip.basename` & rhs)
{}
endsnippet

snippet doc "construction" b
/*
 * $1
 */
endsnippet

snippet docL "construction" b
/**********************************************************************************
 * $1
 *********************************************************************************/
endsnippet

snippet docS "construction" b
/*---------------------------------------------------------------------------------
 * $1
 *-------------------------------------------------------------------------------*/
endsnippet
